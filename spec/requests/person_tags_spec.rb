require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/person_tags", type: :request do
  # PersonTag. As you add validations to PersonTag, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    role = Role.create!(name: "Developer", short_name: "DEV")
    seniority = Seniority.create!(name: "Senior", prefix: "S", sort_index: 0)
    person = Person.create!(current_name: "Some person", role: role, seniority: seniority)
    tag = Tag.create!(value: "some_tag")
    {
      person_id: person.id,
      tag_id: tag.id,
    }
  end

  let(:invalid_attributes) do
    {
      person_id: "",
      tag_id: "",
    }
  end

  describe "GET /index" do
    it "renders a successful response" do
      PersonTag.create! valid_attributes
      get person_tags_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      person_tag = PersonTag.create! valid_attributes
      get person_tag_url(person_tag)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_person_tag_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      person_tag = PersonTag.create! valid_attributes
      get edit_person_tag_url(person_tag)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new PersonTag" do
        expect {
          post person_tags_url, params: { person_tag: valid_attributes }
        }.to change(PersonTag, :count).by(1)
      end

      it "redirects to the created person_tag" do
        post person_tags_url, params: { person_tag: valid_attributes }
        expect(response).to redirect_to(person_tag_url(PersonTag.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new PersonTag" do
        expect {
          post person_tags_url, params: { person_tag: invalid_attributes }
        }.to change(PersonTag, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post person_tags_url, params: { person_tag: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_tag) do
        Tag.create!(value: "new_tag")
      end

      let(:new_attributes) do
        {
          tag_id: new_tag.id,
        }
      end

      it "updates the requested person_tag" do
        person_tag = PersonTag.create! valid_attributes
        patch person_tag_url(person_tag), params: { person_tag: new_attributes }
        person_tag.reload
        expect(person_tag.tag).to eql(new_tag)
      end

      it "redirects to the person_tag" do
        person_tag = PersonTag.create! valid_attributes
        patch person_tag_url(person_tag), params: { person_tag: new_attributes }
        person_tag.reload
        expect(response).to redirect_to(person_tag_url(person_tag))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        person_tag = PersonTag.create! valid_attributes
        patch person_tag_url(person_tag), params: { person_tag: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested person_tag" do
      person_tag = PersonTag.create! valid_attributes
      expect {
        delete person_tag_url(person_tag)
      }.to change(PersonTag, :count).by(-1)
    end

    it "redirects to the person_tags list" do
      person_tag = PersonTag.create! valid_attributes
      delete person_tag_url(person_tag)
      expect(response).to redirect_to(person_tags_url)
    end
  end
end
