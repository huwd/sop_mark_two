require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/team_assignments", type: :request do
  # TeamAssignment. As you add validations to TeamAssignment, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    role = Role.create!(name: "Developer", short_name: "DEV")
    seniority = Seniority.create!(name: "Senior", prefix: "S")
    person = Person.create!(current_name: "Some person", role: role, seniority: seniority)
    team = Team.create!(name: "Some team", start_time: "2020-01-01")
    {
      team_id: team.id,
      person_id: person.id,
    }
  end

  let(:invalid_attributes) do
    {
      team_id: "",
      person_id: "",
    }
  end

  describe "GET /index" do
    it "renders a successful response" do
      TeamAssignment.create! valid_attributes
      get team_assignments_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      team_assignment = TeamAssignment.create! valid_attributes
      get team_assignment_url(team_assignment)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_team_assignment_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      team_assignment = TeamAssignment.create! valid_attributes
      get edit_team_assignment_url(team_assignment)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new TeamAssignment" do
        expect {
          post team_assignments_url, params: { team_assignment: valid_attributes }
        }.to change(TeamAssignment, :count).by(1)
      end

      it "redirects to the created team_assignment" do
        post team_assignments_url, params: { team_assignment: valid_attributes }
        expect(response).to redirect_to(team_assignment_url(TeamAssignment.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new TeamAssignment" do
        expect {
          post team_assignments_url, params: { team_assignment: invalid_attributes }
        }.to change(TeamAssignment, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post team_assignments_url, params: { team_assignment: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:other_team) do
        Team.create!(name: "Other team", start_time: "2020-01-01")
      end

      let(:new_attributes) do
        {
          team_id: other_team.id,
        }
      end

      it "updates the requested team_assignment" do
        team_assignment = TeamAssignment.create! valid_attributes
        patch team_assignment_url(team_assignment), params: { team_assignment: new_attributes }
        team_assignment.reload
        expect(team_assignment.team).to eql other_team
      end

      it "redirects to the team_assignment" do
        team_assignment = TeamAssignment.create! valid_attributes
        patch team_assignment_url(team_assignment), params: { team_assignment: new_attributes }
        team_assignment.reload
        expect(response).to redirect_to(team_assignment_url(team_assignment))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        team_assignment = TeamAssignment.create! valid_attributes
        patch team_assignment_url(team_assignment), params: { team_assignment: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested team_assignment" do
      team_assignment = TeamAssignment.create! valid_attributes
      expect {
        delete team_assignment_url(team_assignment)
      }.to change(TeamAssignment, :count).by(-1)
    end

    it "redirects to the team_assignments list" do
      team_assignment = TeamAssignment.create! valid_attributes
      delete team_assignment_url(team_assignment)
      expect(response).to redirect_to(team_assignments_url)
    end
  end
end
