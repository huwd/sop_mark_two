require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/seniorities", type: :request do
  # Seniority. As you add validations to Seniority, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      name: "Senior",
      prefix: "S",
    }
  end

  let(:invalid_attributes) do
    {
      name: "",
      prefix: "",
    }
  end

  describe "GET /index" do
    it "renders a successful response" do
      Seniority.create! valid_attributes
      get seniorities_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      seniority = Seniority.create! valid_attributes
      get seniority_url(seniority)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_seniority_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      seniority = Seniority.create! valid_attributes
      get edit_seniority_url(seniority)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Seniority" do
        expect {
          post seniorities_url, params: { seniority: valid_attributes }
        }.to change(Seniority, :count).by(1)
      end

      it "redirects to the created seniority" do
        post seniorities_url, params: { seniority: valid_attributes }
        expect(response).to redirect_to(seniority_url(Seniority.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Seniority" do
        expect {
          post seniorities_url, params: { seniority: invalid_attributes }
        }.to change(Seniority, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post seniorities_url, params: { seniority: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        {
          name: "Super senior",
        }
      end

      it "updates the requested seniority" do
        seniority = Seniority.create! valid_attributes
        patch seniority_url(seniority), params: { seniority: new_attributes }
        seniority.reload
        expect(seniority.name).to eql("Super senior")
        expect(seniority.prefix).to eql("S")
      end

      it "redirects to the seniority" do
        seniority = Seniority.create! valid_attributes
        patch seniority_url(seniority), params: { seniority: new_attributes }
        seniority.reload
        expect(response).to redirect_to(seniority_url(seniority))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        seniority = Seniority.create! valid_attributes
        patch seniority_url(seniority), params: { seniority: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested seniority" do
      seniority = Seniority.create! valid_attributes
      expect {
        delete seniority_url(seniority)
      }.to change(Seniority, :count).by(-1)
    end

    it "redirects to the seniorities list" do
      seniority = Seniority.create! valid_attributes
      delete seniority_url(seniority)
      expect(response).to redirect_to(seniorities_url)
    end
  end
end
